#!/usr/bin/env php
<?php

namespace HM\Cavalcade\Runner;

use Exception;

include dirname(__DIR__) . '/bootstrap.php';

$options = getopt('l:p:b:w:c:i:d:');
$log_path = $options['l'] ?? '/var/log/wp/cron.log';
$pid_file = $options['p'] ?? '/run/cavalcade-runner/cavalcade-runner.pid';
$wp_base_path = $options['b'] ?? '/var/web/wp';
$max_workers_count = intval($options['w'] ?? 2);
$wpcli_path = $options['c'] ?? '/usr/local/bin/wp';
$cleanup_interval = intval($options['i'] ?? 60);
$cleanup_delay = intval($options['d'] ?? 24 * 60 * 60);

date_default_timezone_set('UTC');
$log = Logger::create($log_path);
$pid = getmypid();
if ($pid === null) {
    $log->fatal('cannot get PID');
    exit(1);
}

file_put_contents($pid_file, $pid);

try {
    $runner = Runner::instance(
        $log,
        $max_workers_count,
        $wpcli_path,
        $cleanup_interval,
        $cleanup_delay,
        $wp_base_path,
    );
    $runner->bootstrap();
    /*CAVALCADE_HOOKS_FOR_TESTING*/
    $log->info('Cavalcade Runner started');
    $runner->run();
} catch (SignalInterrupt $e) {
    $log->info('shutting down', [
        'reason' => $e->getMessage(),
        'signal' => $e->getCode(),
    ]);
} catch (Exception $e) {
    $log->fatal($e->getMessage(), ['trace' => $e->getTraceAsString()]);
    unlink($pid_file);
    exit(1);
} finally {
    unlink($pid_file);
}
