#!/usr/bin/env php
<?php

namespace HM\Cavalcade\Runner;

use Exception;

include dirname(__DIR__) . '/bootstrap.php';

$options = getopt('l:p:b:w:c:i:d:e:k:h:z:');
$log_path = $options['l'] ?? '/var/log/wp/cron.log';
$pid_file = $options['p'] ?? '/run/cavalcade-runner/cavalcade-runner.pid';
$wp_base_path = $options['b'] ?? '/var/web/wp';
$max_workers_count = intval($options['w'] ?? 2);
$wpcli_path = $options['c'] ?? '/usr/local/bin/wp';
$cleanup_interval = intval($options['i'] ?? 60);
$ip_check_interval = intval($options['h'] ?? 5);
$cleanup_delay = intval($options['d'] ?? 24 * 60 * 60);
$eip = $options['e'];
$lockfile_path = $options['k'] ?? '/var/etc/custom/cavalcade/runner.lock';
$max_log_size = intval($options['z'] ?? 100 * 1024);

date_default_timezone_set('UTC');
$log = Logger::create($log_path);
$pid = getmypid();
if ($pid === null) {
    $log->fatal('cannot get PID');
    exit(1);
}

const PUBLIC_IP_URL = 'http://169.254.169.254/latest/meta-data/public-ipv4';

$get_current_ip = function () {
    $ctx = stream_context_create(['http' => ['timeout' => 0.5]]);
    return file_get_contents(PUBLIC_IP_URL, false, $ctx);
};

/*CAVALCADE_GET_IP_FOR_TESTING*/

file_put_contents($pid_file, $pid);

try {
    $lockfile = ensure_singleton($log, $lockfile_path, $eip);
    $runner = Runner::instance(
        $log,
        $max_workers_count,
        $wpcli_path,
        $cleanup_interval,
        $cleanup_delay,
        $wp_base_path,
        $get_current_ip,
        $ip_check_interval,
        $eip,
        $max_log_size,
    );
    $runner->bootstrap();
    /*CAVALCADE_HOOKS_FOR_TESTING*/
    $log->info('Cavalcade Runner started');
    $runner->run();
} catch (SignalInterrupt $e) {
    $log->info('shutting down', [
        'reason' => $e->getMessage(),
        'signal' => $e->getCode(),
    ]);
} catch (Exception $e) {
    $log->fatal($e->getMessage(), ['trace' => $e->getTraceAsString()]);
    unlink($pid_file);
    exit(1);
} finally {
    unlink($pid_file);
    @fclose($lockfile);
}

function has_eip($log, $eip)
{
    global $get_current_ip;

    $ip = $get_current_ip();

    if ($ip === false) {
        $log->error('failed to get public IP');
        return false;
    }

    if ($ip === $eip) {
        $log->debug('found EIP', ['eip' => $eip]);
        return true;
    }

    $log->debug('could not find EIP', ['eip' => $eip, 'current_ip' => $ip]);
    return false;
}

function file_locked($log, $lockfile)
{
    if (flock($lockfile, LOCK_EX | LOCK_NB)) {
        $log->debug('lock succeeded');
        return true;
    }

    $log->debug('lock attempt failed');
    return false;
}

function ensure_singleton($log, $lockfile_path, $eip)
{
    $terminate = function ($signal) {
        throw new SignalInterrupt(
            'Terminated by signal during ensure_singleton()',
            $signal
        );
    };
    pcntl_signal(SIGTERM, $terminate);
    pcntl_signal(SIGINT, $terminate);
    pcntl_signal(SIGQUIT, $terminate);

    // This lockfile (and its lock) will be closed when this process is exited.
    $lockfile = fopen($lockfile_path, 'w+');
    if ($lockfile === false) {
        $log->fatal('failed to open lockfile', ['path' => $lockfile_path]);
        throw new Exception('failed to open lockfile');
    }

    while (!has_eip($log, $eip) || !file_locked($log, $lockfile)) {
        pcntl_signal_dispatch();
        sleep(10);
    }

    $log->info('ensured singleton');
    return $lockfile;
}
