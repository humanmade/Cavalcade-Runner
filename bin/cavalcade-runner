#!/usr/bin/env php
<?php

namespace HM\Cavalcade\Runner;

use Exception;

include dirname(__DIR__) . '/autoload.php';

$options = getopt('l:p:b:w:c:i:d:e:k:z:s:q:');
$log_path = $options['l'] ?? '/var/log/wp/cron.log';
$pid_file = $options['p'] ?? '/run/cavalcade-runner/cavalcade-runner.pid';
$wp_base_path = $options['b'] ?? '/var/web/wp';
$max_workers_count = intval($options['w'] ?? 2);
$wpcli_path = $options['c'] ?? '/usr/local/bin/wp';
$cleanup_interval = intval($options['i'] ?? 60);
$cleanup_delay = intval($options['d'] ?? 24 * 60 * 60);
$healthcheck_option = $options['e'];
$lockfile_path = $options['k'] ?? '/var/etc/custom/cavalcade/runner.lock';
$state_path = $options['s'] ?? '/var/etc/custom/cavalcade/state.json';
$max_log_size = intval($options['z'] ?? 100 * 1024);
$healthcheck_php = $options['q'] ?? dirname(__DIR__) . '/inc/healthcheck-eip.php';

date_default_timezone_set('UTC');
$log = Logger::create($log_path);
$pid = getmypid();
if ($pid === null) {
    $log->fatal('cannot get PID');
    exit(1);
}

set_error_handler(function ($errno, $errstr, $errfile, $errline) use ($log) {
    // error was suppressed with the @-operator
    if (0 === error_reporting()) {
        return false;
    }

    $log->debug('PHP error', [
        'no' => $errno,
        'str' => $errstr,
        'file' => $errfile,
        'line' => $errline,
    ]);

    throw new PHPException("PHP error ocurred: $errstr", $errno, $errstr, $errfile, $errline);
});

require $healthcheck_php;

init_healthcheck($healthcheck_option);

$pdoclass = 'PDO';

/*CAVALCADE_PDOCLASS_FOR_TESTING*/

file_put_contents($pid_file, $pid);

try {
    set_signal_handler();
    $lockfile = ensure_singleton($log, $lockfile_path);
    $runner = Runner::instance(
        $log,
        $pdoclass,
        $max_workers_count,
        $wpcli_path,
        $cleanup_interval,
        $cleanup_delay,
        $wp_base_path,
        $max_log_size,
        $state_path
    );
    $runner->bootstrap();
    /*CAVALCADE_HOOKS_FOR_TESTING*/
    $log->info('Cavalcade Runner started');
    $runner->run();
} catch (SignalInterrupt $e) {
    $log->info('shutting down', [
        'type' => 'signal interrupt',
        'reason' => $e->getMessage(),
        'signal' => $e->getCode(),
    ]);
} catch (Exception $e) {
    $log->fatal($e->getMessage(), ['trace' => $e->getTraceAsString()]);
    unlink($pid_file);
    exit(1);
} finally {
    $log->info('process exited gracefully');
    unlink($pid_file);
    @fclose($lockfile);
}

function file_locked($log, $lockfile)
{
    if (flock($lockfile, LOCK_EX | LOCK_NB)) {
        $log->debug('lock succeeded');
        return true;
    }

    $log->debug('lock attempt failed');
    return false;
}

function set_signal_handler()
{
    $terminate = function ($signal) {
        throw new SignalInterrupt(
            'Terminated by signal during ensure_singleton()',
            $signal
        );
    };
    pcntl_signal(SIGTERM, $terminate);
    pcntl_signal(SIGINT, $terminate);
    pcntl_signal(SIGQUIT, $terminate);
}

function ensure_singleton($log, $lockfile_path)
{
    // This lockfile (and its lock) will be closed when this process is exited.
    $lockfile = fopen($lockfile_path, 'w+');
    if ($lockfile === false) {
        $log->fatal('failed to open lockfile', ['path' => $lockfile_path]);
        throw new Exception('failed to open lockfile');
    }

    while (true) {
        list($is_healthy, $reason) = healthcheck();
        if ($is_healthy) {
            $log->debug('passed healthcheck');

            if (file_locked($log, $lockfile)) {
                break;
            }
        } else {
            $log->info($reason->getMessage(), $reason->getData());
        }

        pcntl_signal_dispatch();
        sleep(10);
    }

    $log->info('ensured singleton');
    return $lockfile;
}
