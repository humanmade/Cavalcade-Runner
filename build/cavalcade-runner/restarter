#!/bin/bash

set -eu

ctrl_fifo=work/runner_ctrl.fifo
ctrl_done_fifo=work/runner_ctrl_done.fifo

runner_command='bin/cavalcade-runner-test -l work/log/cavalcade-runner.log -p work/cavalcade-runner.pid -b /www -w 10 -i 2 -d 6 -e 192.0.2.255,5,/www/.maintenance -k work/runner.lock -s work/log/runner-state.json -z 2000 -q inc/healthcheck-test.php'

mkdir -p work
mkfifo "$ctrl_fifo" "$ctrl_done_fifo"
trap "rm -f $ctrl_fifo $ctrl_done_fifo" EXIT
pid=0

ctrl_done () {
  echo '' > "$ctrl_done_fifo"
}

for (( ; ; )); do
  # Wait for control signal to be sent
  sig="$(< "$ctrl_fifo")"

  case "$sig" in
    'start')
      $runner_command \
        >> work/log/cavalcade-runner-test.stdout.log \
        2>> work/log/cavalcade-runner-test.stderr.log &
      pid="$!"
      ctrl_done
      continue
      ;;
    'sigterm')
      kill "$pid"
      ctrl_done
      continue
      ;;
    'create_table')
      bin/create-table \
        >> work/log/create-table.stdout.log \
        2>> work/log/create-table.stderr.log
      ctrl_done
      continue
      ;;
    'exit')
      if [ "$pid" -ne 0 ]; then
        kill "$pid" || true
      fi
      ctrl_done
      ;;
    'destroy_all')
      break  # break exits for loop.
      ;;
    *)
      >&2 echo "unknown runner ctrl command: $sig"
      exit 1
      ;;
  esac
done

if [ "$pid" -ne 0 ]; then
  kill "$pid"
fi
